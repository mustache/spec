overview: |
  Rationale:

  The core specification of Mustache does not provide a convenient mechanism
  to emit a header or footer related to an iterable section.

  As this is a very common need, various patterns have emerged to fill the gap.
  These patterns tends to be either implementation dependent (making changing
  mustache engines or sharing templates accross applications difficult) or
  involve adding decoration in the rendered data (requiring ad-hoc logic to
  alter the data before rendering).

  This optional module provides a standard mechanism to fill the gap.


  Proposed mechanism

  The proposed implementation takes inspiration from ~dynamic-names, adding
  a '?' qualifier after the section sigil for the optional interpretation.
  
  ```
  {{#?list}}
    <h1>heading</j1>
    {{#list}}
      <p>{{item}}</p>
    {{/list}}
  {{/list}}
  ```

  The new qualified section should not affect the stack and should be
  rendered for non-empty sequences only, ignored for anything else (the normal
  section tag already covers the need to test for truthyness on non-sequence
  types). 

  Callables should be called, and the section rendered if and only if
  the result is a non-empty list.

  Lambda should NOT be called, and the section should not be rendered.
  

  Discussion:

  Other possible solutions would be
  - reserve a new sigil ('?' could be an option)
  => not chosen as this would be a very narrow use case
  - use a conventional name extension (trailing '?', '$len', ...)
  => could be ok provived the extension does NOT contain a '.' as it whould
  create interactions with dotted names resolution.
  => this solution is not consistent with Mustache overall design, with the
  extension looking like a move toward adding function call syntax.
  - use a different qualifier
  => '?' seems best to convey the meaning

  The reasoning for the behaviour with lamba (not called) is that the result
  of a lambda is NOT a sequence (it is the source of a mustache template).


  Opened questions:

  Should we require result of callable be cached and used for resolution of
  a matching unqualified section in the same stack frame?
  => bias towards no to simplify implementation, but callable with side effects
  could lead to unexpected output.

  This proposition will break rendering of existing templates where sections
  refers to symbols starting with '?' that are not used as list indicators.
  Is it a significant concern or can we ignore this?
  => one simple option is to require mustache engines have API to activate
  the feature but it is not really in scope of this specification.
tests:
  - name: Basic sequence check
    desc: Non-empty sequence emits the conditional block
    data:
      list: [1, 2]
      heading: "Heading"
    template: |
      {{#?list}}
      {{heading}}
      {{/list}}
    expected: |
      Heading
  - name: Basic sequence check
    desc: Empty sequence does not emit the header
    data:
      list: []
      heading: "Heading"
    template: |
      {{#?list}}
      {{heading}}
      {{/list}}
    expected: ""
  - name: Basic sequence check
    desc: Dotted names can be checked
    data:
      obj:
        list1: [1, 2]
        list2: []
    template: |
      {{#?obj.list1}}
      Ok
      {{/obj.list1}}
      {{#?obj.list2}}
      Wrong
      {{/obj.list2}}
    expected: |
      Ok
  - name: Implicit iterator
    desc: Implicit iterator can be checked
    data:
      list: [[1, 2, 3], [], ['a', 'b', 'c']]
      before: "-> "
      after: " <-"
    template: |
      {{#list}}{{#?.}}
      {{&before}}{{#.}}{{.}}{{/.}}{{&after}}
      {{/.}}{{/list}}
    expected: |
      -> 123 <-
      -> abc <-
  - name: Non-Sequence
    desc: Strings don't triger sequence-check section
    data: {"x" : "wrong"}
    template: "{{#?x}}{{x}}{{/x}}"
    expected: ""
  - name: Non-Sequence
    desc: Objects don't triger sequence-check section
    data: {"x": {"y": "wrong"}}
    template: "{{#?x}}{{x.y}}{{/x}}"
    expected: ""
  - name: Non-Sequence
    desc: Boolean true don't triger sequence-check section
    data: { "x": true }
    template: "{{#?x}}wrong{{/x}}"
    expected: ""
  - name: Whitespace sensitivity
    desc: Sequence check can be in a standalone tag sequence
    data: {list: [1, 2]}
    template: |
      {{#?list}}
      Before
      {{/list}}{{#list}}
      - {{.}}
      {{/list}}{{#?list}}
      After
      {{/list}}
    expected: |
      Before
      - 1
      - 2
      After
